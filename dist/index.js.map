{"version":3,"sources":["../src/strapi.ts","../src/index.ts"],"sourcesContent":["import axios, { AxiosInstance, AxiosRequestConfig, } from 'axios';\r\nimport * as Types from './strapi.d'\r\n\r\nconst DELETE_SUCCESS_CODE = 200 as const;\r\n\r\nexport  class Strapi {\r\n    axios: AxiosInstance;\r\n    constructor(params?: Types.StrapiClientArgs) {\r\n        this.axios = axios.create({\r\n            baseURL: params?.baseUrl ? `${params?.baseUrl}/api` : 'http://localhost:1337/api',\r\n            ...params?.axiosOptions,\r\n        });\r\n        if (params?.apiKey) this.axios.defaults.headers.common.Authorization = `Bearer ${params.apiKey}`;\r\n    }\r\n\r\n    /**\r\n     * Fetches a single resource by its ID from the specified endpoint using an HTTP GET request.\r\n     *\r\n     * @template T - The type of the data expected in the response. Defaults to `any` if not specified.\r\n     *\r\n     * @param {string} resource - The resource path or endpoint from which to fetch the data.\r\n     * @param {string | number} id - The unique identifier of the resource to be fetched.\r\n     * @param {AxiosRequestConfig} [options] - Optional Axios configuration for the request (e.g., headers, params).\r\n     *\r\n     * @returns {Promise<StrapiResponse<T>>} - A promise that resolves to an object containing the `data`\r\n     *                                               of type `T` and the HTTP status code of the response.\r\n     *\r\n     * @throws Will reject the promise if the HTTP request fails, returning the error.\r\n     *\r\n     * @example\r\n     * // Fetches a user with ID 1 from the 'users' resource\r\n     * findOne<User>('users', 1)\r\n     *   .then(response => {\r\n     *     console.log(response.data); // User data\r\n     *     console.log(response.status); // HTTP status code\r\n     *   })\r\n     *   .catch(error => {\r\n     *     console.error('Error fetching the user:', error);\r\n     *   });\r\n     */\r\n    async findOne<T = any>(\r\n        resource: string,\r\n        id: string | number,\r\n        options?: AxiosRequestConfig\r\n    ): Promise<Types.StrapiResponse<T>> {\r\n        try {\r\n            const res = await this.axios.get(`${resource}/${id}`, options);\r\n            return { data: res.data, status: res.status };\r\n        } catch (e) {\r\n            return Promise.reject(e);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Fetches all resources from the specified endpoint using an HTTP GET request.\r\n     *\r\n     * @template T - The type of the data expected in the response. Defaults to `any` if not specified.\r\n     *\r\n     * @param {string} resource - The resource path or endpoint from which to fetch the data.\r\n     * @param {AxiosRequestConfig} [options] - Optional Axios configuration for the request (e.g., headers, params).\r\n     *\r\n     * @returns {Promise<Types.StrapiResponse<T>>} - A promise that resolves to an object containing the `data`\r\n     *                                               of type `T` and the HTTP status code of the response.\r\n     *\r\n     * @throws Will reject the promise if the HTTP request fails, returning the error.\r\n     *\r\n     * @example\r\n     * // Fetches all users from the 'users' resource\r\n     * findAll<User>('users')\r\n     *   .then(response => {\r\n     *     console.log(response.data); // Array of users\r\n     *     console.log(response.status); // HTTP status code\r\n     *   })\r\n     *   .catch(error => {\r\n     *     console.error('Error fetching users:', error);\r\n     *   });\r\n     */\r\n    async findAll<T = any>(resource: string, options?: AxiosRequestConfig): Promise<Types.StrapiResponse<T>> {\r\n        try {\r\n            const res = await this.axios.get(`${resource}`, options);\r\n            return { data: res.data, status: res.status };\r\n        } catch (e) {\r\n            return Promise.reject(e);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new resource at the specified endpoint using an HTTP POST request.\r\n     *\r\n     * @template T - The type of the data expected in the response. Defaults to `any` if not specified.\r\n     *\r\n     * @param {string} resource - The resource path or endpoint where the new data will be created.\r\n     * @param {any} body - The data to be sent in the body of the request for creating the resource.\r\n     * @param {AxiosRequestConfig} [options] - Optional Axios configuration for the request (e.g., headers, params).\r\n     *\r\n     * @returns {Promise<Types.StrapiResponse<T>>} - A promise that resolves to an object containing the `data`\r\n     *                                               of type `T` and the HTTP status code of the response.\r\n     *\r\n     * @throws Will reject the promise if the HTTP request fails, returning the error.\r\n     *\r\n     * @example\r\n     * // Creates a new user in the 'users' resource\r\n     * create<User>('users', { name: 'John Doe', email: 'john@example.com' })\r\n     *   .then(response => {\r\n     *     console.log(response.data); // Created user data\r\n     *     console.log(response.status); // HTTP status code\r\n     *   })\r\n     *   .catch(error => {\r\n     *     console.error('Error creating user:', error);\r\n     *   });\r\n     */\r\n    async create<T = any>(resource: string, body: any, options?: AxiosRequestConfig): Promise<Types.StrapiResponse<T>> {\r\n        try {\r\n            const res = await this.axios.post(`${resource}`, body, options);\r\n            return { data: res.data, status: res.status };\r\n        } catch (e) {\r\n            return Promise.reject(e);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates an existing resource at the specified endpoint using an HTTP PUT request.\r\n     *\r\n     * @template T - The type of the data expected in the response. Defaults to `any` if not specified.\r\n     *\r\n     * @param {string} resource - The resource path or endpoint where the resource will be updated.\r\n     * @param {string | number} id - The unique identifier of the resource to be updated.\r\n     * @param {any} updatedData - The new data to be sent in the body of the request for updating the resource.\r\n     * @param {AxiosRequestConfig} [options] - Optional Axios configuration for the request (e.g., headers, params).\r\n     *\r\n     * @returns {Promise<Types.StrapiResponse<T>>} - A promise that resolves to an object containing the `data`\r\n     *                                               of type `T` and the HTTP status code of the response.\r\n     *\r\n     * @throws Will reject the promise if the HTTP request fails, returning the error.\r\n     *\r\n     * @example\r\n     * // Updates a user with ID 1 in the 'users' resource\r\n     * update<User>('users', 1, { email: 'john.doe@example.com' })\r\n     *   .then(response => {\r\n     *     console.log(response.data); // Updated user data\r\n     *     console.log(response.status); // HTTP status code\r\n     *   })\r\n     *   .catch(error => {\r\n     *     console.error('Error updating user:', error);\r\n     *   });\r\n     */\r\n    async update<T = any>(\r\n        resource: string,\r\n        id: string | number,\r\n        updatedData: any,\r\n        options?: AxiosRequestConfig\r\n    ): Promise<Types.StrapiResponse<T>> {\r\n        try {\r\n            const res = await this.axios.put(`${resource}/${id}`, updatedData, options);\r\n            return { data: res.data, status: res.status };\r\n        } catch (e) {\r\n            return Promise.reject(e);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Deletes a resource at the specified endpoint using an HTTP DELETE request.\r\n     *\r\n     * @param {string} resource - The resource path or endpoint from which the data will be deleted.\r\n     * @param {string | number} id - The unique identifier of the resource to be deleted.\r\n     *\r\n     * @returns {Promise<Types.StrapiDeleteResponse>} - A promise that resolves to an object containing the HTTP\r\n     *                                                 status code and a boolean indicating whether the deletion\r\n     *                                                 was successful.\r\n     *\r\n     * @throws Will reject the promise if the HTTP request fails, returning the error.\r\n     *\r\n     * @example\r\n     * // Deletes a user with ID 1 from the 'users' resource\r\n     * delete('users', 1)\r\n     *   .then(response => {\r\n     *     console.log(response.status); // HTTP status code\r\n     *     console.log(response.deleted); // true if deleted successfully\r\n     *   })\r\n     *   .catch(error => {\r\n     *     console.error('Error deleting user:', error);\r\n     *   });\r\n     */\r\n    async delete(resource: string, id: string | number): Promise<Types.StrapiDeleteResponse> {\r\n        try {\r\n            const res = await this.axios.delete(`${resource}/${id}`);\r\n            return { status: res.status, deleted: res.status === DELETE_SUCCESS_CODE };\r\n        } catch (e) {\r\n            return Promise.reject(e);\r\n        }\r\n    }\r\n\r\n    async login<T>(args: Types.StrapiClientArgs): Promise<Types.StrapiResponse<T>> {\r\n        try {\r\n            const res = await this.axios.post('/auth/local', args);\r\n            return { data: res.data, status: res.status };\r\n        } catch (e) {\r\n            return Promise.reject(e);\r\n        }\r\n    }\r\n}\r\n","const { Strapi } = require( './strapi');\r\n\r\nexport default Strapi;\r\n"],"mappings":"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","names":["Strapi"]}